import{_ as s,c as a,o as i,a6 as t}from"./chunks/framework.CX3W3h5X.js";const g=JSON.parse('{"title":"Function: outputJsonSync()","description":"","frontmatter":{},"headers":[],"relativePath":"typedoc/node/functions/outputJsonSync.md","filePath":"typedoc/node/functions/outputJsonSync.md"}'),n={name:"typedoc/node/functions/outputJsonSync.md"},e=t(`<p><a href="./../../README.html"><strong>@vtj</strong></a> • <strong>Docs</strong></p><hr><p><a href="./../../modules.html">@vtj</a> / <a href="./../README.html">node</a> / outputJsonSync</p><h1 id="function-outputjsonsync" tabindex="-1">Function: outputJsonSync() <a class="header-anchor" href="#function-outputjsonsync" aria-label="Permalink to &quot;Function: outputJsonSync()&quot;">​</a></h1><blockquote><p><strong>outputJsonSync</strong>(<code>file</code>, <code>data</code>, <code>options</code>?): <code>void</code></p></blockquote><p>Almost the same as <code>writeJsonSync</code>, except that if the directory does not exist, it&#39;s created.</p><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><p>• <strong>file</strong>: <code>string</code></p><p>• <strong>data</strong>: <code>any</code></p><p>• <strong>options?</strong>: <code>JsonOutputOptions</code></p><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><code>void</code></p><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;fs-extra&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> file</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;/tmp/this/path/does/not/exist/file.json&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">outputJsonSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(file, {name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;JP&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readJsonSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(file)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data.name) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// =&gt; JP</span></span></code></pre></div><h2 id="defined-in" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in" aria-label="Permalink to &quot;Defined in&quot;">​</a></h2><p>packages/node/src/fs.ts:25</p>`,16),o=[e];function p(h,l,r,d,c,k){return i(),a("div",null,o)}const y=s(n,[["render",p]]);export{g as __pageData,y as default};
