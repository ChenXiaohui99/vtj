import{_ as e,c as o,o as c,V as d}from"./chunks/framework.BFAhPwk2.js";const u=JSON.parse('{"title":"Namespace: svgIcons","description":"","frontmatter":{},"headers":[],"relativePath":"typedoc/modules/icons.svgIcons.md","filePath":"typedoc/modules/icons.svgIcons.md"}'),n={name:"typedoc/modules/icons.svgIcons.md"},t=d('<p><a href="./../README.html">@vtj</a> / <a href="./../modules.html">Modules</a> / <a href="./icons.html">icons</a> / svgIcons</p><h1 id="namespace-svgicons" tabindex="-1">Namespace: svgIcons <a class="header-anchor" href="#namespace-svgicons" aria-label="Permalink to &quot;Namespace: svgIcons&quot;">​</a></h1><p><a href="./icons.html">icons</a>.svgIcons</p><h2 id="table-of-contents" tabindex="-1">Table of contents <a class="header-anchor" href="#table-of-contents" aria-label="Permalink to &quot;Table of contents&quot;">​</a></h2><h3 id="variables" tabindex="-1">Variables <a class="header-anchor" href="#variables" aria-label="Permalink to &quot;Variables&quot;">​</a></h3><ul><li><a href="./icons.svgIcons.html#exitfullscreen">ExitFullscreen</a></li><li><a href="./icons.svgIcons.html#fixed">Fixed</a></li><li><a href="./icons.svgIcons.html#fullscreen">Fullscreen</a></li><li><a href="./icons.svgIcons.html#invisible">Invisible</a></li><li><a href="./icons.svgIcons.html#lineheight">LineHeight</a></li><li><a href="./icons.svgIcons.html#maximize">Maximize</a></li><li><a href="./icons.svgIcons.html#minimize">Minimize</a></li><li><a href="./icons.svgIcons.html#popup">Popup</a></li><li><a href="./icons.svgIcons.html#qrcodelogin">QrCodeLogin</a></li><li><a href="./icons.svgIcons.html#rawclose">RawClose</a></li><li><a href="./icons.svgIcons.html#rawlock">RawLock</a></li><li><a href="./icons.svgIcons.html#rawunlock">RawUnLock</a></li><li><a href="./icons.svgIcons.html#rows">Rows</a></li><li><a href="./icons.svgIcons.html#skin">Skin</a></li><li><a href="./icons.svgIcons.html#unfixed">UnFixed</a></li><li><a href="./icons.svgIcons.html#userlogin">UserLogin</a></li><li><a href="./icons.svgIcons.html#visible">Visible</a></li></ul><h2 id="variables-1" tabindex="-1">Variables <a class="header-anchor" href="#variables-1" aria-label="Permalink to &quot;Variables&quot;">​</a></h2><h3 id="exitfullscreen" tabindex="-1">ExitFullscreen <a class="header-anchor" href="#exitfullscreen" aria-label="Permalink to &quot;ExitFullscreen&quot;">​</a></h3><p>• <code>Const</code> <strong>ExitFullscreen</strong>: <code>DefineComponent</code>&lt;{ <code>colors</code>: { <code>default</code>: () =&gt; <code>never</code>[] ; <code>type</code>: <code>PropType</code>&lt;<code>string</code>[]&gt; } }, () =&gt; <code>JSX.Element</code>, <code>unknown</code>, {}, {}, <code>ComponentOptionsMixin</code>, <code>ComponentOptionsMixin</code>, {}, <code>string</code>, <code>PublicProps</code>, <code>Readonly</code>&lt;<code>ExtractPropTypes</code>&lt;{ <code>colors</code>: { <code>default</code>: () =&gt; <code>never</code>[] ; <code>type</code>: <code>PropType</code>&lt;<code>string</code>[]&gt; } }&gt;&gt;, { <code>colors</code>: <code>string</code>[] }, {}&gt;</p><h4 id="defined-in" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p>packages/icons/types/components/ExitFullscreen.d.ts:3</p><hr><h3 id="fixed" tabindex="-1">Fixed <a class="header-anchor" href="#fixed" aria-label="Permalink to &quot;Fixed&quot;">​</a></h3><p>• <code>Const</code> <strong>Fixed</strong>: <code>DefineComponent</code>&lt;{ <code>colors</code>: { <code>default</code>: () =&gt; <code>never</code>[] ; <code>type</code>: <code>PropType</code>&lt;<code>string</code>[]&gt; } }, () =&gt; <code>JSX.Element</code>, <code>unknown</code>, {}, {}, <code>ComponentOptionsMixin</code>, <code>ComponentOptionsMixin</code>, {}, <code>string</code>, <code>PublicProps</code>, <code>Readonly</code>&lt;<code>ExtractPropTypes</code>&lt;{ <code>colors</code>: { <code>default</code>: () =&gt; <code>never</code>[] ; <code>type</code>: <code>PropType</code>&lt;<code>string</code>[]&gt; } }&gt;&gt;, { <code>colors</code>: <code>string</code>[] }, {}&gt;</p><h4 id="defined-in-1" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-1" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p>packages/icons/types/components/Fixed.d.ts:3</p><hr><h3 id="fullscreen" tabindex="-1">Fullscreen <a class="header-anchor" href="#fullscreen" aria-label="Permalink to &quot;Fullscreen&quot;">​</a></h3><p>• <code>Const</code> <strong>Fullscreen</strong>: <code>DefineComponent</code>&lt;{ <code>colors</code>: { <code>default</code>: () =&gt; <code>never</code>[] ; <code>type</code>: <code>PropType</code>&lt;<code>string</code>[]&gt; } }, () =&gt; <code>JSX.Element</code>, <code>unknown</code>, {}, {}, <code>ComponentOptionsMixin</code>, <code>ComponentOptionsMixin</code>, {}, <code>string</code>, <code>PublicProps</code>, <code>Readonly</code>&lt;<code>ExtractPropTypes</code>&lt;{ <code>colors</code>: { <code>default</code>: () =&gt; <code>never</code>[] ; <code>type</code>: <code>PropType</code>&lt;<code>string</code>[]&gt; } }&gt;&gt;, { <code>colors</code>: <code>string</code>[] }, {}&gt;</p><h4 id="defined-in-2" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-2" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p>packages/icons/types/components/Fullscreen.d.ts:3</p><hr><h3 id="invisible" tabindex="-1">Invisible <a class="header-anchor" href="#invisible" aria-label="Permalink to &quot;Invisible&quot;">​</a></h3><p>• <code>Const</code> <strong>Invisible</strong>: <code>DefineComponent</code>&lt;{ <code>colors</code>: { <code>default</code>: () =&gt; <code>never</code>[] ; <code>type</code>: <code>PropType</code>&lt;<code>string</code>[]&gt; } }, () =&gt; <code>JSX.Element</code>, <code>unknown</code>, {}, {}, <code>ComponentOptionsMixin</code>, <code>ComponentOptionsMixin</code>, {}, <code>string</code>, <code>PublicProps</code>, <code>Readonly</code>&lt;<code>ExtractPropTypes</code>&lt;{ <code>colors</code>: { <code>default</code>: () =&gt; <code>never</code>[] ; <code>type</code>: <code>PropType</code>&lt;<code>string</code>[]&gt; } }&gt;&gt;, { <code>colors</code>: <code>string</code>[] }, {}&gt;</p><h4 id="defined-in-3" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-3" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p>packages/icons/types/components/Invisible.d.ts:3</p><hr><h3 id="lineheight" tabindex="-1">LineHeight <a class="header-anchor" href="#lineheight" aria-label="Permalink to &quot;LineHeight&quot;">​</a></h3><p>• <code>Const</code> <strong>LineHeight</strong>: <code>DefineComponent</code>&lt;{ <code>colors</code>: { <code>default</code>: () =&gt; <code>never</code>[] ; <code>type</code>: <code>PropType</code>&lt;<code>string</code>[]&gt; } }, () =&gt; <code>JSX.Element</code>, <code>unknown</code>, {}, {}, <code>ComponentOptionsMixin</code>, <code>ComponentOptionsMixin</code>, {}, <code>string</code>, <code>PublicProps</code>, <code>Readonly</code>&lt;<code>ExtractPropTypes</code>&lt;{ <code>colors</code>: { <code>default</code>: () =&gt; <code>never</code>[] ; <code>type</code>: <code>PropType</code>&lt;<code>string</code>[]&gt; } }&gt;&gt;, { <code>colors</code>: <code>string</code>[] }, {}&gt;</p><h4 id="defined-in-4" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-4" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p>packages/icons/types/components/LineHeight.d.ts:3</p><hr><h3 id="maximize" tabindex="-1">Maximize <a class="header-anchor" href="#maximize" aria-label="Permalink to &quot;Maximize&quot;">​</a></h3><p>• <code>Const</code> <strong>Maximize</strong>: <code>DefineComponent</code>&lt;{ <code>colors</code>: { <code>default</code>: () =&gt; <code>never</code>[] ; <code>type</code>: <code>PropType</code>&lt;<code>string</code>[]&gt; } }, () =&gt; <code>JSX.Element</code>, <code>unknown</code>, {}, {}, <code>ComponentOptionsMixin</code>, <code>ComponentOptionsMixin</code>, {}, <code>string</code>, <code>PublicProps</code>, <code>Readonly</code>&lt;<code>ExtractPropTypes</code>&lt;{ <code>colors</code>: { <code>default</code>: () =&gt; <code>never</code>[] ; <code>type</code>: <code>PropType</code>&lt;<code>string</code>[]&gt; } }&gt;&gt;, { <code>colors</code>: <code>string</code>[] }, {}&gt;</p><h4 id="defined-in-5" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-5" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p>packages/icons/types/components/Maximize.d.ts:3</p><hr><h3 id="minimize" tabindex="-1">Minimize <a class="header-anchor" href="#minimize" aria-label="Permalink to &quot;Minimize&quot;">​</a></h3><p>• <code>Const</code> <strong>Minimize</strong>: <code>DefineComponent</code>&lt;{ <code>colors</code>: { <code>default</code>: () =&gt; <code>never</code>[] ; <code>type</code>: <code>PropType</code>&lt;<code>string</code>[]&gt; } }, () =&gt; <code>JSX.Element</code>, <code>unknown</code>, {}, {}, <code>ComponentOptionsMixin</code>, <code>ComponentOptionsMixin</code>, {}, <code>string</code>, <code>PublicProps</code>, <code>Readonly</code>&lt;<code>ExtractPropTypes</code>&lt;{ <code>colors</code>: { <code>default</code>: () =&gt; <code>never</code>[] ; <code>type</code>: <code>PropType</code>&lt;<code>string</code>[]&gt; } }&gt;&gt;, { <code>colors</code>: <code>string</code>[] }, {}&gt;</p><h4 id="defined-in-6" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-6" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p>packages/icons/types/components/Minimize.d.ts:3</p><hr><h3 id="popup" tabindex="-1">Popup <a class="header-anchor" href="#popup" aria-label="Permalink to &quot;Popup&quot;">​</a></h3><p>• <code>Const</code> <strong>Popup</strong>: <code>DefineComponent</code>&lt;{ <code>colors</code>: { <code>default</code>: () =&gt; <code>never</code>[] ; <code>type</code>: <code>PropType</code>&lt;<code>string</code>[]&gt; } }, () =&gt; <code>JSX.Element</code>, <code>unknown</code>, {}, {}, <code>ComponentOptionsMixin</code>, <code>ComponentOptionsMixin</code>, {}, <code>string</code>, <code>PublicProps</code>, <code>Readonly</code>&lt;<code>ExtractPropTypes</code>&lt;{ <code>colors</code>: { <code>default</code>: () =&gt; <code>never</code>[] ; <code>type</code>: <code>PropType</code>&lt;<code>string</code>[]&gt; } }&gt;&gt;, { <code>colors</code>: <code>string</code>[] }, {}&gt;</p><h4 id="defined-in-7" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-7" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p>packages/icons/types/components/Popup.d.ts:3</p><hr><h3 id="qrcodelogin" tabindex="-1">QrCodeLogin <a class="header-anchor" href="#qrcodelogin" aria-label="Permalink to &quot;QrCodeLogin&quot;">​</a></h3><p>• <code>Const</code> <strong>QrCodeLogin</strong>: <code>DefineComponent</code>&lt;{ <code>colors</code>: { <code>default</code>: () =&gt; <code>never</code>[] ; <code>type</code>: <code>PropType</code>&lt;<code>string</code>[]&gt; } }, () =&gt; <code>JSX.Element</code>, <code>unknown</code>, {}, {}, <code>ComponentOptionsMixin</code>, <code>ComponentOptionsMixin</code>, {}, <code>string</code>, <code>PublicProps</code>, <code>Readonly</code>&lt;<code>ExtractPropTypes</code>&lt;{ <code>colors</code>: { <code>default</code>: () =&gt; <code>never</code>[] ; <code>type</code>: <code>PropType</code>&lt;<code>string</code>[]&gt; } }&gt;&gt;, { <code>colors</code>: <code>string</code>[] }, {}&gt;</p><h4 id="defined-in-8" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-8" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p>packages/icons/types/components/QrCodeLogin.d.ts:3</p><hr><h3 id="rawclose" tabindex="-1">RawClose <a class="header-anchor" href="#rawclose" aria-label="Permalink to &quot;RawClose&quot;">​</a></h3><p>• <code>Const</code> <strong>RawClose</strong>: <code>DefineComponent</code>&lt;{ <code>colors</code>: { <code>default</code>: () =&gt; <code>never</code>[] ; <code>type</code>: <code>PropType</code>&lt;<code>string</code>[]&gt; } }, () =&gt; <code>JSX.Element</code>, <code>unknown</code>, {}, {}, <code>ComponentOptionsMixin</code>, <code>ComponentOptionsMixin</code>, {}, <code>string</code>, <code>PublicProps</code>, <code>Readonly</code>&lt;<code>ExtractPropTypes</code>&lt;{ <code>colors</code>: { <code>default</code>: () =&gt; <code>never</code>[] ; <code>type</code>: <code>PropType</code>&lt;<code>string</code>[]&gt; } }&gt;&gt;, { <code>colors</code>: <code>string</code>[] }, {}&gt;</p><h4 id="defined-in-9" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-9" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p>packages/icons/types/components/RawClose.d.ts:3</p><hr><h3 id="rawlock" tabindex="-1">RawLock <a class="header-anchor" href="#rawlock" aria-label="Permalink to &quot;RawLock&quot;">​</a></h3><p>• <code>Const</code> <strong>RawLock</strong>: <code>DefineComponent</code>&lt;{ <code>colors</code>: { <code>default</code>: () =&gt; <code>never</code>[] ; <code>type</code>: <code>PropType</code>&lt;<code>string</code>[]&gt; } }, () =&gt; <code>JSX.Element</code>, <code>unknown</code>, {}, {}, <code>ComponentOptionsMixin</code>, <code>ComponentOptionsMixin</code>, {}, <code>string</code>, <code>PublicProps</code>, <code>Readonly</code>&lt;<code>ExtractPropTypes</code>&lt;{ <code>colors</code>: { <code>default</code>: () =&gt; <code>never</code>[] ; <code>type</code>: <code>PropType</code>&lt;<code>string</code>[]&gt; } }&gt;&gt;, { <code>colors</code>: <code>string</code>[] }, {}&gt;</p><h4 id="defined-in-10" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-10" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p>packages/icons/types/components/RawLock.d.ts:3</p><hr><h3 id="rawunlock" tabindex="-1">RawUnLock <a class="header-anchor" href="#rawunlock" aria-label="Permalink to &quot;RawUnLock&quot;">​</a></h3><p>• <code>Const</code> <strong>RawUnLock</strong>: <code>DefineComponent</code>&lt;{ <code>colors</code>: { <code>default</code>: () =&gt; <code>never</code>[] ; <code>type</code>: <code>PropType</code>&lt;<code>string</code>[]&gt; } }, () =&gt; <code>JSX.Element</code>, <code>unknown</code>, {}, {}, <code>ComponentOptionsMixin</code>, <code>ComponentOptionsMixin</code>, {}, <code>string</code>, <code>PublicProps</code>, <code>Readonly</code>&lt;<code>ExtractPropTypes</code>&lt;{ <code>colors</code>: { <code>default</code>: () =&gt; <code>never</code>[] ; <code>type</code>: <code>PropType</code>&lt;<code>string</code>[]&gt; } }&gt;&gt;, { <code>colors</code>: <code>string</code>[] }, {}&gt;</p><h4 id="defined-in-11" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-11" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p>packages/icons/types/components/RawUnLock.d.ts:3</p><hr><h3 id="rows" tabindex="-1">Rows <a class="header-anchor" href="#rows" aria-label="Permalink to &quot;Rows&quot;">​</a></h3><p>• <code>Const</code> <strong>Rows</strong>: <code>DefineComponent</code>&lt;{ <code>colors</code>: { <code>default</code>: () =&gt; <code>never</code>[] ; <code>type</code>: <code>PropType</code>&lt;<code>string</code>[]&gt; } }, () =&gt; <code>JSX.Element</code>, <code>unknown</code>, {}, {}, <code>ComponentOptionsMixin</code>, <code>ComponentOptionsMixin</code>, {}, <code>string</code>, <code>PublicProps</code>, <code>Readonly</code>&lt;<code>ExtractPropTypes</code>&lt;{ <code>colors</code>: { <code>default</code>: () =&gt; <code>never</code>[] ; <code>type</code>: <code>PropType</code>&lt;<code>string</code>[]&gt; } }&gt;&gt;, { <code>colors</code>: <code>string</code>[] }, {}&gt;</p><h4 id="defined-in-12" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-12" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p>packages/icons/types/components/Rows.d.ts:3</p><hr><h3 id="skin" tabindex="-1">Skin <a class="header-anchor" href="#skin" aria-label="Permalink to &quot;Skin&quot;">​</a></h3><p>• <code>Const</code> <strong>Skin</strong>: <code>DefineComponent</code>&lt;{ <code>colors</code>: { <code>default</code>: () =&gt; <code>never</code>[] ; <code>type</code>: <code>PropType</code>&lt;<code>string</code>[]&gt; } }, () =&gt; <code>JSX.Element</code>, <code>unknown</code>, {}, {}, <code>ComponentOptionsMixin</code>, <code>ComponentOptionsMixin</code>, {}, <code>string</code>, <code>PublicProps</code>, <code>Readonly</code>&lt;<code>ExtractPropTypes</code>&lt;{ <code>colors</code>: { <code>default</code>: () =&gt; <code>never</code>[] ; <code>type</code>: <code>PropType</code>&lt;<code>string</code>[]&gt; } }&gt;&gt;, { <code>colors</code>: <code>string</code>[] }, {}&gt;</p><h4 id="defined-in-13" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-13" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p>packages/icons/types/components/Skin.d.ts:3</p><hr><h3 id="unfixed" tabindex="-1">UnFixed <a class="header-anchor" href="#unfixed" aria-label="Permalink to &quot;UnFixed&quot;">​</a></h3><p>• <code>Const</code> <strong>UnFixed</strong>: <code>DefineComponent</code>&lt;{ <code>colors</code>: { <code>default</code>: () =&gt; <code>never</code>[] ; <code>type</code>: <code>PropType</code>&lt;<code>string</code>[]&gt; } }, () =&gt; <code>JSX.Element</code>, <code>unknown</code>, {}, {}, <code>ComponentOptionsMixin</code>, <code>ComponentOptionsMixin</code>, {}, <code>string</code>, <code>PublicProps</code>, <code>Readonly</code>&lt;<code>ExtractPropTypes</code>&lt;{ <code>colors</code>: { <code>default</code>: () =&gt; <code>never</code>[] ; <code>type</code>: <code>PropType</code>&lt;<code>string</code>[]&gt; } }&gt;&gt;, { <code>colors</code>: <code>string</code>[] }, {}&gt;</p><h4 id="defined-in-14" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-14" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p>packages/icons/types/components/UnFixed.d.ts:3</p><hr><h3 id="userlogin" tabindex="-1">UserLogin <a class="header-anchor" href="#userlogin" aria-label="Permalink to &quot;UserLogin&quot;">​</a></h3><p>• <code>Const</code> <strong>UserLogin</strong>: <code>DefineComponent</code>&lt;{ <code>colors</code>: { <code>default</code>: () =&gt; <code>never</code>[] ; <code>type</code>: <code>PropType</code>&lt;<code>string</code>[]&gt; } }, () =&gt; <code>JSX.Element</code>, <code>unknown</code>, {}, {}, <code>ComponentOptionsMixin</code>, <code>ComponentOptionsMixin</code>, {}, <code>string</code>, <code>PublicProps</code>, <code>Readonly</code>&lt;<code>ExtractPropTypes</code>&lt;{ <code>colors</code>: { <code>default</code>: () =&gt; <code>never</code>[] ; <code>type</code>: <code>PropType</code>&lt;<code>string</code>[]&gt; } }&gt;&gt;, { <code>colors</code>: <code>string</code>[] }, {}&gt;</p><h4 id="defined-in-15" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-15" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p>packages/icons/types/components/UserLogin.d.ts:3</p><hr><h3 id="visible" tabindex="-1">Visible <a class="header-anchor" href="#visible" aria-label="Permalink to &quot;Visible&quot;">​</a></h3><p>• <code>Const</code> <strong>Visible</strong>: <code>DefineComponent</code>&lt;{ <code>colors</code>: { <code>default</code>: () =&gt; <code>never</code>[] ; <code>type</code>: <code>PropType</code>&lt;<code>string</code>[]&gt; } }, () =&gt; <code>JSX.Element</code>, <code>unknown</code>, {}, {}, <code>ComponentOptionsMixin</code>, <code>ComponentOptionsMixin</code>, {}, <code>string</code>, <code>PublicProps</code>, <code>Readonly</code>&lt;<code>ExtractPropTypes</code>&lt;{ <code>colors</code>: { <code>default</code>: () =&gt; <code>never</code>[] ; <code>type</code>: <code>PropType</code>&lt;<code>string</code>[]&gt; } }&gt;&gt;, { <code>colors</code>: <code>string</code>[] }, {}&gt;</p><h4 id="defined-in-16" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-16" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p>packages/icons/types/components/Visible.d.ts:3</p>',91),i=[t];function a(s,r,l,p,g,h){return c(),o("div",null,i)}const m=e(n,[["render",a]]);export{u as __pageData,m as default};
