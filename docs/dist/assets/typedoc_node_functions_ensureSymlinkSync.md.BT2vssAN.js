import{_ as s,c as e,o as n,a6 as a}from"./chunks/framework.CX3W3h5X.js";const u=JSON.parse('{"title":"Function: ensureSymlinkSync()","description":"","frontmatter":{},"headers":[],"relativePath":"typedoc/node/functions/ensureSymlinkSync.md","filePath":"typedoc/node/functions/ensureSymlinkSync.md"}'),i={name:"typedoc/node/functions/ensureSymlinkSync.md"},t=a(`<p><a href="./../../README.html"><strong>@vtj</strong></a> • <strong>Docs</strong></p><hr><p><a href="./../../modules.html">@vtj</a> / <a href="./../README.html">node</a> / ensureSymlinkSync</p><h1 id="function-ensuresymlinksync" tabindex="-1">Function: ensureSymlinkSync() <a class="header-anchor" href="#function-ensuresymlinksync" aria-label="Permalink to &quot;Function: ensureSymlinkSync()&quot;">​</a></h1><blockquote><p><strong>ensureSymlinkSync</strong>(<code>src</code>, <code>dest</code>, <code>type</code>?): <code>void</code></p></blockquote><p>Ensures that the symlink exists. If the directory structure does not exist, it is created.</p><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><p>• <strong>src</strong>: <code>string</code></p><p>• <strong>dest</strong>: <code>string</code></p><p>• <strong>type?</strong>: <code>Type</code></p><p>It is only available on Windows and ignored on other platforms.</p><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><code>void</code></p><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;fs-extra&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> srcPath</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;/tmp/file.txt&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> destPath</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;/tmp/this/path/does/not/exist/file.txt&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ensureSymlinkSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(srcPath, destPath)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// symlink has now been created, including the directory it is to be placed in</span></span></code></pre></div><h2 id="defined-in" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in" aria-label="Permalink to &quot;Defined in&quot;">​</a></h2><p>packages/node/src/fs.ts:21</p>`,17),r=[t];function o(l,h,p,d,c,k){return n(),e("div",null,r)}const m=s(i,[["render",o]]);export{u as __pageData,m as default};
